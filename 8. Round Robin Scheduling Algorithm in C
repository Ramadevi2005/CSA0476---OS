#include <stdio.h>
void findWaitingTime(int processes[], int n, int bt[], int wt[], int quantum) {
    int rem_bt[n];
    for (int i = 0; i < n; i++)
        rem_bt[i] = bt[i];
    int t = 0;
    while (1) {
        int done = 1;
        for (int i = 0; i < n; i++) {
            if (rem_bt[i] > 0) {
                done = 0;
                if (rem_bt[i] > quantum) {
                    t += quantum;
                    rem_bt[i] -= quantum;
                } else {
                    t = t + rem_bt[i];
                    wt[i] = t - bt[i];
                    rem_bt[i] = 0;
                }
            }
        }
        if (done == 1)
            break;
    }
}
void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
    for (int i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}
void findavgTime(int processes[], int n, int bt[], int quantum) {
    int wt[n], tat[n];
    findWaitingTime(processes, n, bt, wt, quantum);
    findTurnAroundTime(processes, n, bt, wt, tat);
    printf("Processes  Burst Time  Waiting Time  Turn-Around Time\n");
    int total_wt = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf(" %d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);
    }
    printf("\nAverage waiting time = %.2f", (float)total_wt / n);
    printf("\nAverage turn-around time = %.2f", (float)total_tat / n);
}
int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    int processes[n], burst_time[n];
    printf("Enter burst times:\n");
    for (int i = 0; i < n; i++) {
        processes[i] = i + 1;
        scanf("%d", &burst_time[i]);
    }
    int quantum;
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    findavgTime(processes, n, burst_time, quantum);
    return 0;
}
# OUTPUT:
Enter number of processes and quantum time: 5 3
Enter burst time for process 1: 4
Enter burst time for process 2: 5
Enter burst time for process 3: 6
Enter burst time for process 4: 3
Enter burst time for process 5: 2
PID 4 completed at time 12
PID 5 completed at time 14
PID 1 completed at time 15
PID 2 completed at time 17
PID 3 completed at time 20
