#include <stdio.h>
struct Process {
    int id, burst_time, waiting_time, turnaround_time;
};
void findWaitingTime(struct Process proc[], int n) {
    proc[0].waiting_time = 0;
    for (int i = 1; i < n; i++)
        proc[i].waiting_time = proc[i - 1].waiting_time + proc[i - 1].burst_time;
}
void findTurnaroundTime(struct Process proc[], int n) {
    for (int i = 0; i < n; i++)
        proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
}
void findavgTime(struct Process proc[], int n) {
    findWaitingTime(proc, n);
    findTurnaroundTime(proc, n);
    float total_wait = 0, total_tat = 0;
    for (int i = 0; i < n; i++) {
        total_wait += proc[i].waiting_time;
        total_tat += proc[i].turnaround_time;
    }
    printf("Average Waiting Time: %.2f\n", total_wait / n);
    printf("Average Turnaround Time: %.2f\n", total_tat / n);
}
int main() {
    struct Process proc[] = {{1, 6}, {2, 8}, {3, 7}, {4, 3}};
    int n = sizeof(proc) / sizeof(proc[0]);
    
    // Sort processes by burst time
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (proc[j].burst_time > proc[j + 1].burst_time) {
                struct Process temp = proc[j];
                proc[j] = proc[j + 1];
                proc[j + 1] = temp;
            }
    
    findavgTime(proc, n);
    return 0;
}
# OUTPUT:
Average Waiting Time: 7.00
Average Turnaround Time: 13.00
